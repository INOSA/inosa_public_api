nelmio_api_doc:
  areas:
    default:
      path_patterns:
        - ^/api(?!/doc$)

  models:
    use_jms: false
    names:
      - { alias: CreateUserRequest, type: App\AuthorizationServer\CreateUser\Application\CreateUserRequest }
      - { alias: GetUsersRequest, type: App\AuthorizationServer\GetUsers\Application\GetUsersRequest }
      - { alias: ConnectUserToRolesRequest, type: App\AuthorizationServer\ConnectUserToRoles\Application\ConnectUserToRolesRequest }
  documentation:
    servers:
      - url: '/%public_api_prefix_url%'
    tags:
      - name: 'v1'
        description: 'Version 1 of Public API'
    info:
      title: 'Public API Documentation'
      description: |
        # INOSA Public API Documentation

        Public API is a subset of internal INOSA API endpoints that are publicly available. The documentation page you are currently browsing shows these exposed endpoints and tells how to integrate third-party applications with INOSA.

        ## Authorization
        Public API is a *REST API* that uses OAuth2 as an authorization protocol. The currently used method of authorization is the **client credentials** flow described in OAuth2 [RFC page](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1).
        This documentation provides try-it functionality. In order to try an endpoint click on the Authorize button, provide generated credentials, select scopes and then send a request to generate the token.
        Token will be stored between the request so there is no need to generate it for the every single call.
        
        ## Getting started
        To get started you need to have client credentials generated by the INOSA application Administrator. Credentials consist of pair `client_id` and `client_secret` that are confidential and **MUST** be kept secret. As soon as you have them you can call the token endpoint to get Access Token. 
        Important to note is that all paths begins with the /api/[api-path] however for your implementation you have to
        take into account that the server-prefix (available below in Servers dropdown) is `[your-domain]/[server-prefix]/api/[api-path]`.
        
        For example having following set of values: *your-domain = inosa.no, server-prefix = public-api, api-path = users*. As a result you will have the following url: `inosa.no/public-api/api/users`
        
        ## Receiving access token
        In the token request, [client_idenfier] and [client_secret] is the pair of keys generated by the INOSA application administrator.
        ```
        POST /token
        Content-type: application-json
        {
        	"client_id": [client_idenfier],
        	"client_secret": [client_secret],
        	"grant_type": "client_credentials"
        }
        ```
        
        ## Access tokens
        Access token in Public API has a JWT format and will grant you access to the endpoints. Simply, put it in the Authorization header of the request `e.g. Authorization: Bearer [generated_token]`.
        
        Each access token lasts for 1 hour and needs to be regenerated after that time, it also carries information about granted scopes - in the current version `public-api` scope is the only supported and allow to request all available endpoints.

        The `Endpoint` means one of the available ways of communicating with the Public API. Each endpoint has a specific structure, that consists of the HTTP method like GET, POST, PUT, DELETE, request URI, request params also known as query parameters, request body needed for endpoints that require JSON payload, and request headers.

        ## Identifiers
        In the documentation we are going to use word `UUID` that is a [version 4 universal identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) used within INOSA application. 
        
        In the documentation, all parameters named with suffix **id** like **departmentId**, **permissionsGroupsId**, **roleId** mean respectively INOSA application department UUID, permissions groups UUID, role UUID. This rule applies for all the INOSA related items named with such pattern. 
        It may occur that the parameter name does not have **id** suffix but the particular endpoint documentation says explicitly that in fact it's required to send UUID's.
        Identifiers can be fetched by using Public API exposed endpoints.

        ## Examples
        Example usage of the endpoint with request parameter.
        ```
        GET /api/users/{id}/reading-status
        Authorization: Bearer [token]
        ```
        in the example `{id}` is a UUID of the INOSA application user. 
        [token] is just a placeholder for the token received from the **/token** endpoint.

        When it comes to requests that require a request body, Public API uses JSON for exchanging data. Example usage of endpoint responsible for connecting roles to particular user would look like that:
        ```
        PUT /api/users/{userId}/roles
        Authorization: Bearer [token]
        Content-type: application-json
        {
        	"e9d56d50-8e9e-49d3-bf25-d5b3a464b84b",
        	"b60de267-f657-43eb-b0a1-a2929e262864"
        }
        ```
        Payload data consists of two INOSA application *roles* UUID and *userId* is a request parameters that is INOSA application user UUID identifier.
      version: '1.0'
    paths:
      /api/departments:
        get:
          tags: [ 'v1' ]
          summary: 'Get departments'
          operationId: getDepartments
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/roles:
        get:
          tags: [ 'v1' ]
          summary: 'Get roles'
          operationId: getRoles
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/permissions-groups:
        get:
          tags: [ 'v1' ]
          summary: 'Get permissions groups'
          operationId: getPermissionsGroups
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/folders-basic-structure/without-metrics:
        get:
          tags: [ 'v1' ]
          summary: 'Get folder basic structure without metrics'
          operationId: getFolderBasicStructureWithoutMetrics
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/users/role-status:
        get:
          tags: [ 'v1' ]
          description: |
            Endpoint that is responsible for fetching role status per user. `roleId` query parameter is used for filtration.
          summary: 'Get role status per user'
          operationId: getRoleStatus
          parameters:
            - in: query
              name: roleId[]
              schema:
                type: array
                items:
                  type: string
              required: false
              description: 'A list of INOSA application role UUID'
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '400':
              $ref: '#/components/responses/BadRequest'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/users/reading-status:
        get:
          tags: [ 'v1' ]
          description: |
            Endpoint that is responsible for fetching reading status per user. `documentId` query parameter is used for filtration.
          summary: 'Get reading status per user'
          operationId: getReadingStatusPerUser
          parameters:
            - in: query
              name: documentId[]
              schema:
                type: array
                items:
                  type: string
              required: false
              description: 'A list of INOSA application document UUID'
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '400':
              $ref: '#/components/responses/BadRequest'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/users/{id}/reading-status:
        get:
          tags: [ 'v1' ]
          description: |
            Endpoint that is responsible for fetching reading status for the particular user. 
            `id` is a INOSA application user UUId.
            Query parameters `roleId` and `documentId` are respectively INOSA application role UUID and document UUID. They are used for the filtration purposes.
          summary: 'Get reading status for one user'
          operationId: getReadingStatusForOneUser
          parameters:
            - in: query
              name: roleId[]
              schema:
                type: array
                items:
                  type: string
              required: false
              description: 'A list of INOSA application role UUID'
            - in: query
              name: documentId[]
              schema:
                type: array
                items:
                  type: string
              required: false
              description: 'A list of INOSA application department UUID'
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '400':
              $ref: '#/components/responses/BadRequest'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/departments/reading-status:
        get:
          tags: [ 'v1' ]
          description: |
            Endpoint that is responsible for fetching reading status per deparment. Query parameter `departmentId` is used for the filtration.
          summary: 'Get reading status per department'
          operationId: getReadingStatusPerDepartment
          parameters:
            - in: query
              name: departmentId[]
              schema:
                type: array
                items:
                  type: string
              required: false
              description: 'A list of INOSA application department UUID'
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '400':
              $ref: '#/components/responses/BadRequest'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/users/{userId}/roles:
        put:
          tags: [ 'v1' ]
          summary: 'Assign user to roles'
          description: |
            Endpoint that is responsible for attaching specific roles for the particular user. As the method is PUT it is required to
            send all role UUIDs currently assigned for the user and attach new role UUIDs.
          operationId: assignUserToRoles
          requestBody:
            description: |
              * roles - a list of INOSA application roleId, if empty, user will loss all already assigned roles
              * userId - INOSA application user UUID
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ConnectUserToRolesRequest'
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '400':
              $ref: '#/components/responses/BadRequest'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

      /api/users:
        post:
          tags: [ 'v1' ]
          summary: 'Create user'
          operationId: createUser
          requestBody:
            description: |
              Request for creation of INOSA application user requires the fields that are listed in *Example Value* section.
              These parameters MUST be send in the JSON payload of the POST request.
              
              * permissionsGroups - list of INOSA application permission groups UUID, can also by empty, by the key must be present in the request
              * roles - list of INOSA application role UUID, can also by empty, by the key must be present in the request
              * userIdentifier - INOSA application user UUID
              * departmentIdentifier - INOSA application department UUID
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CreateUserRequest'
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '400':
              $ref: '#/components/responses/BadRequest'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

        get:
          tags: [ 'v1' ]
          summary: 'Get users'
          operationId: getUsers
          description: |
            Get the INOSA application users. Below a list of parameters can be used as a filter.
            So for instance if you would like to get the user from the particular department add a parameter to the uri e.g. 
            ```
            /api/users?departmentId[]=departmentId
            ```
            where departmentId is a INOSA application department UUID.
          parameters:
            - in: query
              name: departmentId[]
              schema:
                type: array
                items:
                  type: string
              required: false
              description: 'List of INOSA application department UUID'
            - in: query
              name: firstname
              schema:
                type: string
              required: false
              description: 'First name of the user'
            - in: query
              name: lastname
              schema:
                type: string
              required: false
              description: 'Last name of the user'
            - in: query
              name: username
              schema:
                type: string
              description: 'User name of the user'
            - in: query
              name: email
              schema:
                type: string
              required: false
              description: 'Email of the user'
          responses:
            '200':
              $ref: '#/components/responses/Success'
            '400':
              $ref: '#/components/responses/BadRequest'
            '401':
              $ref: '#/components/responses/Unauthorized'
            '500':
              $ref: '#/components/responses/ServerError'

    components:
      responses:
        Success:
          description: OK
        Create:
          description: 'The resource has been created'
        ServerError:
          description: 'Internal server error'
        BadRequest:
          description: 'Request is not complete or contain errors'
        NotFound:
          description: 'The specified resource was not found'
        Unauthorized:
          description: 'Unauthorized'
      schemas:
        CreateUserRequest:
          type: object
          properties:
            permissionsGroups:
              type: array
              items:
                type: string
            roles:
              type: array
              items:
                type: string
        GetUsersRequest:
          type: object
          properties:
            departmentIds:
              type: array
              items:
                type: string
        ConnectUserToRolesRequest:
          type: object
          properties:
            roles:
              description: role identifiers
              type: array
              items:
                type: string
      securitySchemes:
        oAuth2ClientCredentials:
          type: oauth2
          description: 'Public API Authorization is based on the Client Credentials flow. In order to achievie client_id and client_secret call administrator, that will generate them. Remeber to keep them secret'
          flows:
            clientCredentials:
              tokenUrl: '/%public_api_prefix_url%/token'
              scopes:
                public-api: 'general purpose scope'
    security:
      - oAuth2ClientCredentials:
          - public-api
